<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_788877_fob.GRUtil</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>GRUtil</name>
        <script><![CDATA[var GRUtil = Class.create();
GRUtil.prototype = {
    initialize: function() {},
    getM2MList: function(parent, m2m_table, parent_reference, child_reference, child_table) {
        var m2m_gr = new GlideRecord(m2m_table);
        m2m_gr.addQuery(parent_reference, parent.sys_id);
        m2m_gr.query();
        var kids = [];
        while (m2m_gr.next())
            kids.push('' + m2m_gr.getValue(child_reference));
        var kids_gr = new GlideRecord(child_table);
        kids_gr.addQuery('sys_id', kids);
        kids_gr.query();
        return kids_gr;
    },
    replaceVariables: function(html, table_name, record_id) {

        var regex = /[$][{][\w]*[}]/g;
        var all_variables = html.match(regex); // Ex: ${rg},${cpf}

        var field_names = all_variables.map(function(variable) {
            var v = variable.replace(/\W/g, '');
            return v;
        }); //Ex: rg,cpf

        var toReplace = {};
        var gr = new GlideRecord(table_name);
        gr.addQuery('sys_id', record_id);
        gr.query();

        if (gr.next()) {
            field_names.forEach(function(field) {

                if (gr.getElement(field).getED().getInternalType() == 'string') {
                    toReplace[field] = gr.getValue(field);
                } else if (gr.getElement(field).getED().getInternalType() == 'reference') {
                    toReplace[field] = gr.getDisplayValue(field);
                } else {
                    toReplace[field] = gr.getValue(field);
                }

            });
        }
        // Ex: toReplace = {rg:'0.000.000','cpf':'00.000.000/0000-00'}

        Object.keys(toReplace).forEach(function(key) {
            if (toReplace[key] != null) {
                var variable = '${' + key + '}';
                html = html.replace(variable, toReplace[key]);
            }
        });

        return html;
    },
    getAttachmentInfo: function(attach_id) {

        var response = {};

        var attachment = new GlideRecord('sys_attachment');
        attachment.addQuery('sys_id', attach_id);
        attachment.query();

        if (attachment.next()) {
            var sysAtt = new GlideSysAttachment();
            var base64Data = sysAtt.getContentBase64(attachment);

            response.file_name = attachment.getValue('file_name');
            response.content_type = attachment.getValue('content_type');
            response.size_bytes = attachment.getValue('size_bytes');
            response.base64Data = base64Data;
        }

        return response;
    },
    getAllAttachmentsIdfromRecord: function(table, sys_id) {

        var table_name = table;
        var record_id = sys_id;
        var ids = [];

        var gr = new GlideRecord('sys_attachment');
        gr.addQuery('table_name', table_name);
        gr.addQuery('table_sys_id', record_id);
        gr.query();

        while (gr.next()) {
            ids.push(gr.getUniqueValue());
        }

        return ids;
    },
    generateRandomHash: function(length) {
        var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
        var hash = '';

        for (var i = 0; i < length; i++) {
            var randomIndex = Math.floor(Math.random() * characters.length);
            hash += characters[randomIndex];
        }

        return hash;
    },
    createFileB64OnRecord: function(tbName, RecordId, FileName, contentType, base64) {

        var attachment = new GlideSysAttachment();

        var rec = new GlideRecord(tbName);
        var SysID = RecordId;
        rec.get(SysID);
		
        var file_name = FileName;
        var content_type = contentType;
        var base64Encodedcontent = base64;

        var agr = attachment.writeBase64(rec, file_name, contentType, base64Encodedcontent);

        return agr;
    },
    type: 'GRUtil'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-07-28 13:44:52</sys_created_on>
        <sys_id>54a73df52fd8b11010dfa1fef699b61a</sys_id>
        <sys_mod_count>10</sys_mod_count>
        <sys_name>GRUtil</sys_name>
        <sys_package display_value="Fast Onboarding" source="x_788877_fob">f62fffe297c43110bc779934a253afb9</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Fast Onboarding">f62fffe297c43110bc779934a253afb9</sys_scope>
        <sys_update_name>sys_script_include_54a73df52fd8b11010dfa1fef699b61a</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2023-08-08 14:21:05</sys_updated_on>
    </sys_script_include>
</record_update>
